Write a function named calculate_exponent that receives two positive integers a and b as parameter and calculates and returns a to the power of b using recursion. For example, when your function is called as:

calculate_exponent(5, 3)
Then, your function should return:
125

##### Sample Solution ###################
def _exponent_recursion_sample_(a, b):
    if b == 0:
        return 1
    else:
        return a * _exponent_recursion_sample_(a, b-1)
        
        
Write a function named calculate_gcd that receives two positive integers a and b as parameter and returns their greatest common divisor (GCD) using recursion. 

For example, when your function is called as:

calculate_gcd(10, 15)
Your function should return:
5


 
################### Sample Solution ###################
def _gcd_recursion_sample_(a, b):
    if b == 0:
        return a
    else:
        return _gcd_recursion_sample_(b, a%b)

 
 
 Write a function named nested_list_sum that receives a nested list of integers as parameter and calculates and returns the total sum of the integers in the list using recursion. Keep in mind that the inner elements may be integers or other nested lists themselves. 

For example, when your function is called as:

nested_list_sum([1, -1, [2, -2], [3, -3, [4, -4], 10]])
Then, your function should return the total sum as
10


################### Sample Solution ###################
def _recursive_sum_sample_(sample_list):
    my_sum = 0
    for element in sample_list:
        if type(element) != type([]):
            my_sum += element
        else :
            my_sum += _recursive_sum_sample_(element)
    return my_sum
    
    
    
    
    
    
    


