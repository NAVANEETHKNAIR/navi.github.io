*** FILE I/O EXERCISE NOTES ***


file_pointer = open(file_name, "r") # only "r" mode works due to the restriction of the platform
some_data = file_pointer.read()     # You may use .readline() or .readlines() 
# Now do something with 'some_data' 

file_pointer = open(file_name, "r") 
for line in file_pointer:           # << doing something like this won't work!!!
   # try to do something with the line
   
   
   Write a function that accepts a filename as input argument and reads the file and saves each line of the file as an element in a list (without the new line ("\n")character) and returns the list. Each line of the file has comma separated values: For example if the content of the file looks like this:

Lucas,Turing,22
Alan,Williams,27
Layla,Trinh,21
Brayden,Huang,22
Oliver,Greek,20
then your function should return a list such as
['Lucas,Turing,22', 'Alan,Williams,27', 'Layla,Trinh,21', 'Brayden,Huang,22', 'Oliver,Greek,20']


 
################### Sample Solution ###################
def _construct_list_from_file_sample_(file_name):
    # Make a connection to the file
    file_pointer = open(file_name, 'r')
    # You can use either .read() or .readline() or .readlines()
    data = file_pointer.readlines()
    out_list = []
    for line in data:
        stripped_line = line.strip('\n')
        out_list.append(stripped_line)
    return out_list

 
 
 Write a function that accepts a filename(string) of a CSV file which contains the information about student's names and their grades for four courses and returns a dictionary of the information. The keys of the dictionary should be the name of the students and the values should be a list of floating point numbers of their grades. For example, if the content of the file looks like this:

Mark,90,93,60,90
Abigail,84,50,72,75
Frank,46,83,53,79
Yohaan,47,77,74,96
then your function should return a dictionary such as:
out_dict = {'Frank': [46.0, 83.0, 53.0, 79.0],
            'Mark': [90.0, 93.0, 60.0, 90.0],
            'Yohaan': [47.0, 77.0, 74.0, 96.0],
            'Abigail': [84.0, 50.0, 72.0, 75.0]}
            
            
            
 
################### Sample Solution ###################
def _construct_dictionary_from_file_sample_(filename):
    my_dictionary = {}
    # Make a connection to the file
    file_pointer = open(filename, 'r')
    data = file_pointer.readlines()
    for line in data:
        name, course1, course2, course3, course4 = line.strip().split(',')
        my_dictionary[name] = [float(course1), float(course2), float(course3), float(course4)]
    return my_dictionary
    
    
    
    
    Write a function that takes a file name (string) of a CSV file which contains the information about student's names and their grades for four courses and returns a dictionary that contains information about the students whose grades in both Math and Chemistry is above 70. Note that if the file has any comments (lines starting with #) then you should ignore such a line. The file will have the following format:

#first_name,math,physics,chemistry,biology
For example if the contents of the file are:
Luke,89,94,81,97
Eva,40,50,65,90
Joseph,55,58,54,99
Oliver,73,74,89,91
then your function should return a dictionary such as:
out_dict = {'Luke': [89.0, 94.0, 81.0, 97.0],
            'Oliver': [73.0, 74.0, 89.0, 91.0]}
            
            
   
################### Sample Solution ###################
def _construct_dictionary_from_file_sample2_(filename):
    my_dictionary = {}
    # set the mode to read mode
    mode = "r"
    # Make a connection to the file
    file_pointer = open(filename, mode)
    data = file_pointer.readlines()
    for line in data:
        # Skip any lines that start with #
        if line[0] != '#':
            # Split the line with the delimiter comma (',')
            name, math, physics, chemistry, biology = line.strip().split(',')
            if float(math) > 70 and float(chemistry) > 70:
                my_dictionary[name] = [float(math), float(physics), float(chemistry), float(biology)]
    return my_dictionary
    
    
    Write a function that accepts a filename as input argument, the file contains the information about a persons expenses on milk and bread and returns a dictionary that contains exactly the strings 'milk' and 'bread' as the keys and their floating point values in a list as values. Each line of the file may start with a 'm' or a 'b' denoting milk or bread respectively. For example if the contents of the file are:

m 0 0 0
b 2 5 1
b 3 5 4
m 1 0 0
b 5 3 1
m 0 1 0
b 2 4 5
then your function should return a dictionary such as:
out_dict = {'milk': [[0.0, 0.0, 0.0], [1.0, 0.0, 0.0], [0.0, 1.0, 0.0]], 
            'bread': [[2.0, 5.0, 1.0], [3.0, 5.0, 4.0], [5.0, 3.0, 1.0], [2.0, 4.0, 5.0]]}
            
            
 
################### Sample Solution ###################
def _construct_nested_list_from_file_sample_(filename):
    my_dictionary = {}
    my_dictionary["milk"] = []
    my_dictionary["bread"] = []
    # set the mode to read mode
    mode = "r"
    # Make a connection to the file
    file_pointer = open(filename, mode)
    data = file_pointer.readlines()
    for line in data:
        first_character = line[0]
        if first_character == "m":
            # remove the first character
            # strip and split by white space
            vertex = line[1::].strip().split()
            # change the string items into floats
            vertex = [float(x) for x in vertex]
            my_dictionary["milk"] += [vertex]

        if first_character == "b":
            face = line[1::].strip().split()
            face = [float(x) for x in face]
            my_dictionary["bread"] += [face]
    return my_dictionary
    
    
    
    
